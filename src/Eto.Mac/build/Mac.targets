<?xml version="1.0" encoding="UTF-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="15.0" InitialTargets="MacTouchApp">

  <PropertyGroup>
    <IsMac Condition="$(OS) == 'Unix' and Exists('/usr/lib/libc.dylib')">True</IsMac>
    <IsUnix Condition="$(OS) == 'Unix'">True</IsUnix>
    <IsWindows Condition="$(IsUnix) != 'True'">True</IsWindows>
  </PropertyGroup>

  <PropertyGroup>
    <!-- properties you can override in your project file -->
    
    <!-- Specify that the bundle should be created during build -->
    <!-- Enabled by default only for exe's and if not using a specific project type (e.g. Xamarin.Mac) -->
    <MacBuildBundle Condition="$(MacBuildBundle) == '' and $(ProjectTypeGuids) == '' and ( $(OutputType) == 'Exe' Or $(OutputType) == 'WinExe' )">True</MacBuildBundle>
    
    <!-- Specifies the name of the .app bundle, usually the same as the project -->
    <MacBundleName Condition="'$(MacBundleName)'==''">$(MSBuildProjectName)</MacBundleName>
    
    <!-- Specifies a folder to copy verbatim into the .app bundle (useful for frameworks, etc) -->
    <InputAppPath Condition="'$(InputAppPath)'==''"></InputAppPath>
    
    <!-- Specifies the full output .app path -->
    <OutputAppPath Condition="'$(OutputAppPath)'==''">$(TargetDir)\$(MacBundleName).app</OutputAppPath>
    
    <!-- Sets the default run configuration, or false to use a special 'Mac' configuration.
    If False, the default configuration of the project will run using the GTK platform when using Eto's platform detection.
    -->
    <MacSetDefaultRunConfiguration Condition="'$(MacSetDefaultRunConfiguration)' == ''">True</MacSetDefaultRunConfiguration>
    
    <!-- minimum installed version of mono required to run -->
    <MacMonoMinimumVersion Condition="$(MacMonoMinimumVersion) == ''">5.10</MacMonoMinimumVersion>
    
    <!-- Specifies that the executable should be bundled using mkbundle so mono isn't required to be installed on the user's machine -->
    <MacBundleMono Condition="$(MacBundleMono) == '' AND $(Configuration) == 'Release'">detect</MacBundleMono> 
    <MacBundleMono Condition="$(MacBundleMono) == ''">False</MacBundleMono> 
    
    <!-- Target when bundling mono, or 'default' to use system mono.  See mkbundle -list-targets -->
    <MacBundleTarget Condition="$(MacBundleTarget) == '' AND $(IsMac) != 'True'">mono-6.4.0-osx-10.9-x64</MacBundleTarget>
    
    <!-- Target server to download packages from.  Use non-ssl so it works on windows. See https://github.com/mono/mono/issues/17201#issuecomment-557943107 -->
    <MacBundleTargetServer Condition="$(MacBundleTargetServer) == '' AND $(IsWindows) == 'True'">http://download.mono-project.com/runtimes/raw/</MacBundleTargetServer>
  </PropertyGroup>

  <ItemGroup>
    <AvailableItemName Include="BundleResource" />
  </ItemGroup>

  <Import Project="RunConfiguration.Default.targets" Condition="$(MacSetDefaultRunConfiguration) == 'True' AND $(IsMac) == 'True' AND $(MacBuildBundle) == 'True'" />
  <Import Project="RunConfiguration.Mac.targets" Condition="$(MacSetDefaultRunConfiguration) != 'True' AND $(IsMac) == 'True' AND $(MacBuildBundle) == 'True'" />

  <Target Name="MacTouchApp" Condition="$(MacBuildBundle) == 'True'">
    <!-- This makes it so we can debug in VS for Mac right away without building first -->
    <MakeDir Directories="$(OutputAppPath)" Condition="$(IsMac) == 'True' AND $(VisualStudioVersion) != ''" />
  </Target>

  <!-- Clean target -->
  <Target Name="CleanAppBundle" AfterTargets="BeforeClean" Condition="$(MacBuildBundle) == 'True'">
    <RemoveDir Directories="$(OutputAppPath)"/>
  </Target>

  <!-- Build target -->
  <Target Name="BuildAppBundle" AfterTargets="AfterBuild" DependsOnTargets="DetectMkBundle" Condition="$(MacBuildBundle) == 'True'" Outputs="$(OutputAppPath)">
    <!-- bundle mono with mkbundle -->
    <CallTarget Targets="MacBundleMono" Condition="$(MacBundleMono) == 'True'" />
    <!-- copy executables and run with installed mono -->
    <CallTarget Targets="MacCopyExecutables" Condition="$(MacBundleMono) != 'True'" />

  </Target>

  <!-- Initialize properties then create the app bundle and .plist -->
  <Target Name="MacInitializeBundle">
    <PropertyGroup>
      <OutputContents>$(OutputAppPath)\Contents</OutputContents>
      <OutputMonoBundlePath>$(OutputContents)\MonoBundle</OutputMonoBundlePath>
      <OutputResourcesPath>$(OutputContents)\Resources</OutputResourcesPath>
      <LauncherFile>$([System.IO.Path]::GetFileNameWithoutExtension('$(TargetFileName)'))</LauncherFile>
      <LauncherFileWithPath>$(OutputContents)\MacOS\$(LauncherFile)</LauncherFileWithPath>

      <HasXamMac>@(ReferenceCopyLocalPaths->AnyHaveMetadataValue('Filename', 'Eto.XamMac2'))</HasXamMac>
      <Has64Bit>@(ReferenceCopyLocalPaths->AnyHaveMetadataValue('Filename', 'Eto.Mac64'))</Has64Bit>
      <Has64Bit Condition="$(Has64Bit) != 'True'">$(HasXamMac)</Has64Bit>
      <MacIncludeSymbols Condition="'$(MacIncludeSymbols)' == ''">true</MacIncludeSymbols>
      <MacArch Condition="'$(MacArch)'==''">x86_64</MacArch>

      <ReferenceFiles>$(MSBuildThisFileDirectory)</ReferenceFiles>
      <OutputPListFile>$(OutputContents)\Info.plist</OutputPListFile>
      <InputPListFile Condition="'@(None->WithMetadataValue('Identity', 'Info.plist')->Distinct())' != ''">$(MSBuildProjectDirectory)\@(None->WithMetadataValue('Identity', 'Info.plist')->Distinct())</InputPListFile>
      <InputPListFile Condition="'$(InputPListFile)' == ''">$(ReferenceFiles)Info.plist</InputPListFile>
    </PropertyGroup>

    <Message Text="Creating $(MacBundleName).app in target directory" Importance="high" />

    <!-- Delete existing stuff, we're going to rebuild them -->
    <RemoveDir Directories="$(OutputMonoBundlePath)" />
    <Delete Files="$(OutputPListFile)" />

    <!-- Copy icon/launcher/etc -->
    <Copy SourceFiles="$(InputAppPath)\**\*.*" DestinationFolder="$(OutputContents)" SkipUnchangedFiles="true" Condition="Exists('$(InputAppPath)')" />
    <Copy SourceFiles="$(InputPListFile)" DestinationFiles="$(OutputPListFile)" Condition="!Exists('$(OutputPListFile)')" />
  </Target>

  <Target Name="DetectMkBundle" Condition="$(MacBundleMono) == 'True' OR $(MacBundleMono) == 'detect'">
    <PropertyGroup>
      <MonoPath Condition="$(MonoPath) == '' AND $(IsMac) == 'True' AND Exists('/Library/Frameworks/Mono.framework/Versions/Current/')">/Library/Frameworks/Mono.framework/Versions/Current/</MonoPath>
      <MonoPath Condition="$(MonoPath) == '' AND $(IsWindows) == 'True' AND Exists('$(ProgramW6432)\mono\')">$(ProgramW6432)\mono\</MonoPath>
      <MonoPath Condition="$(MonoPath) == '' AND $(IsWindows) == 'True' AND Exists('$(MSBuildProgramFiles32)\mono\')">$(MSBuildProgramFiles32)\mono\</MonoPath>
      <MonoPath Condition="$(MonoPath) == '' AND $(IsUnix) == 'True' AND Exists('/usr/bin/mono')">/usr/</MonoPath>

      <MonoBinPath Condition="$(MonoPath) != '' AND Exists('$(MonoPath)bin\')">$(MonoPath)bin\</MonoBinPath>
      <MkBundleExe>$(MonoBinPath)mkbundle</MkBundleExe>

      <IsDetectingMkBundle Condition="$(MacBundleMono) == 'detect'">True</IsDetectingMkBundle>
      <MacBundleMono Condition="$(MacBundleMono) == 'detect' AND Exists('$(MkBundleExe)')">True</MacBundleMono>

      <MacBundleTarget Condition="$(MacBundleTarget) == 'default'"></MacBundleTarget>
    </PropertyGroup>
    <Error Condition="!Exists('$(MkBundleExe)') AND $(MacBundleMono) == 'True'" Text="You must install mono to bundle your app (from https://mono-project.com), or add &lt;MacBundleMono&gt;False&lt;/MacBundleMono&gt; to your project." />
    
    <Message Text="Found mkbundle, bundling mono inside app" Condition="$(IsDetectingMkBundle) == 'True' and $(MacBundleMono) == 'True'" />
    <Warning Text="Couldn't find mkbundle, so app bundle will require mono to be installed! Install mono from https://mono-project.com to bundle it with your app or set MonoPath to where it is installed." Condition="$(IsDetectingMkBundle) == 'True' and $(MacBundleMono) != 'True'" />
  </Target>

  <!-- Install the mono target if needed (e.g. cross compiling on linux or windows) -->
  <Target Name="MacEnsureBundleTarget" Condition="$(MacBundleTarget) != ''">
    <Exec Command='"$(MkBundleExe)" --local-targets' ConsoleToMSBuild="true" StandardOutputImportance="low" >
      <Output TaskParameter="ConsoleOutput" PropertyName="LocalMkBundleTargets" />
    </Exec>
    <PropertyGroup>
      <MkBundleArgs></MkBundleArgs>
      <MkBundleArgs Condition="$(MacBundleTargetServer) != ''">$(MkBundleArgs) --target-server "$(MacBundleTargetServer)"</MkBundleArgs>
      <MkBundleArgs>$(MkBundleArgs) --fetch-target $(MacBundleTarget)</MkBundleArgs>
    </PropertyGroup>
    <Exec Command='"$(MkBundleExe)" $(MkBundleArgs)' Condition="!$(LocalMkBundleTargets.Contains('$(MacBundleTarget)'))" />
    
  </Target>

  <!-- Bundle mono inside the .app using mkbundle -->
  <Target Name="MacBundleMono" DependsOnTargets="MacInitializeBundle;MacEnsureBundleTarget">
    <PropertyGroup>
      <MkBundleArgs></MkBundleArgs>
      <MkBundleArgs Condition="$(MacBundleTarget) != ''">$(MkBundleArgs) --cross $(MacBundleTarget)</MkBundleArgs>
      
      <MkBundleArgs Condition="$(MacBundleTarget) == ''">$(MkBundleArgs) --sdk "$(MonoPath)"</MkBundleArgs>
      <MkBundleArgs Condition="$(MacBundleTarget) == ''">$(MkBundleArgs) -L "$(MonoPath)\lib\mono\4.5\Facades"</MkBundleArgs>
      <MkBundleArgs>$(MkBundleArgs) -L "$(TargetDir.TrimEnd('\'))"</MkBundleArgs>
      <MkBundleArgs>$(MkBundleArgs) --simple --deps</MkBundleArgs> 
      <MkBundleArgs>$(MkBundleArgs) -o "$(LauncherFileWithPath)" "$(TargetPath)"</MkBundleArgs>
      <MkBundleArgs Condition="$(HasXamMac) == 'True'">$(MkBundleArgs) "$(TargetDir)Eto.XamMac2.dll"</MkBundleArgs>
      <MkBundleArgs Condition="$(HasXamMac) != 'True' AND $(Has64Bit) == 'True'">$(MkBundleArgs) "$(TargetDir)Eto.Mac64.dll"</MkBundleArgs>
    </PropertyGroup>
    
    <ItemGroup>
      <!-- missing dependencies in mac cross targets, so copy them over from the system mono -->
      <CrossCompileMissingDependencies Include="$(MonoPath)lib\mono\4.5\WindowsBase.dll" Condition="Exists('$(MonoPath)lib\mono\4.5\WindowsBase.dll')" />
    </ItemGroup>
    
    <!-- fix problems with cross compiling target not including some dependencies -->
    <Copy SourceFiles="@(CrossCompileMissingDependencies)" DestinationFolder="$(TargetDir)" Condition="$(MacBundleTarget) != ''"/>
    
    <!-- Make standalone bundle with embedded mono -->
    <MakeDir Directories="$(OutputContents)\MacOS\" />
    <Exec Command='"$(MkBundleExe)" $(MkBundleArgs)' StandardOutputImportance="low" />
  </Target>
  
  <!-- Copy executables to the MonoBundle folder, which requires mono to be installed in the system -->
  <Target Name="MacCopyExecutables" DependsOnTargets="MacInitializeBundle">
    <PropertyGroup>
      <LauncherExecutable Condition="'$(LauncherExecutable)' == '' AND $(MacArch)=='x86_64'">$(ReferenceFiles)Launcher64</LauncherExecutable>

      <XamarinMacAssembly Condition="$(XamarinMacAssembly) == '' AND Exists('$(ReferenceFiles)Xamarin.Mac.dll')">$(ReferenceFiles)Xamarin.Mac.dll</XamarinMacAssembly>
      <XamarinMacAssembly Condition="$(XamarinMacAssembly) == '' AND Exists('\Library\Frameworks\Xamarin.Mac.framework\Versions\Current\lib\x86_64\full\Xamarin.Mac.dll')">\Library\Frameworks\Xamarin.Mac.framework\Versions\Current\lib\x86_64\full\Xamarin.Mac.dll</XamarinMacAssembly>
    </PropertyGroup>
    
    <Copy SourceFiles="$(LauncherExecutable)" DestinationFiles="$(LauncherFileWithPath)" SkipUnchangedFiles="true" />
    
    <FindUnderPath  
      Files="@(FileWrites)"
      Path="$(TargetDir)">
            <Output TaskParameter="InPath" ItemName="ExecutableFiles" />
    </FindUnderPath>
    
    <!-- Copy ouput files, except for non-mac Eto platforms -->
    <ItemGroup>
      <!--ExecutableFiles Include="$(TargetDir)\**" Exclude="$(OutputAppPath)\**\*" /-->
      <ExecutableFiles Include="$(XamarinMacAssembly)" Condition="$(HasXamMac) == 'True'" />
      <ExecutableFiles Include="@(MacExecutableFiles->'$(TargetDir)%(Identity)')" />
      <ExecutableFiles Include="@(None)" Condition="%(None.CopyToOutputDirectory) != ''" />
      <ExecutableFiles Include="@(ReferenceCopyLocalPaths)" Condition="
        !(%(Filename) == 'Eto' and %(Extension) == '.xml')
        and %(Filename) != 'Eto.Direct2D'
        and %(Filename) != 'Eto.Gtk2'
        and %(Filename) != 'Eto.Gtk3'
        and %(Filename) != 'Eto.Gtk'
        and %(Filename) != 'Eto.Wpf'
        and %(Filename) != 'Eto.WinForms'
        and %(Filename) != 'Eto.iOS'
        and %(Filename) != 'Eto.WinRT'
        and %(Filename) != 'Eto.Android'
        and %(Filename) != 'Eto.XamMac'
        and (
          $(MacIncludeSymbols) == 'True'
          or (
            %(Extension) != '.pdb'
            and %(Extension) != '.mdb'
          )
        )
        and (($(HasXamMac) != 'True' and $(Has64Bit) == 'True') or %(Filename) != 'Eto.Mac64')
        and ($(HasXamMac) == 'True' or %(Filename) != 'Eto.XamMac2')
        " />
    </ItemGroup>
    
    <!-- copy executable files -->
    <Copy SourceFiles="@(ExecutableFiles)" DestinationFolder="$(OutputMonoBundlePath)\%(ExecutableFiles.DestinationSubDirectory)" />
  </Target>
  
  <!-- Finish up by copying resource files and updating the plist -->
  <Target Name="MacFinishBundle" AfterTargets="MacCopyExecutables;MacBundleMono">
    <!-- copy resource files -->
    <ItemGroup>
      <ResourceFiles Include="@(BundleResource)" />
      <ResourceFiles Include="@(Content)" />
    </ItemGroup>
    <Copy SourceFiles="@(ResourceFiles)" DestinationFolder="$(OutputResourcesPath)\%(RecursiveDir)" SkipUnchangedFiles="true" />

    <!-- Add any missing keys to the PListFile -->
    <UpdatePList 
      PListFile="$(OutputPListFile)"
      TargetFileName="$(TargetFileName)"
      MacBundleName="$(MacBundleName)"
      LauncherFile="$(LauncherFile)"
      MonoMinimumVersion="$(MacMonoMinimumVersion)">
      <Output PropertyName="IconFile" TaskParameter="IconFile" />
    </UpdatePList>

    <Message Text="  MacArch: $(MacArch)" Importance="low" /> 
    <Message Text="  Icon: $(IconFile)" Importance="low" /> 
    <Message Text="  Info: $(InputPListFile)" Importance="low" /> 

    <!-- Copy default icon if it doesn't exist -->
    <Copy SourceFiles="$(ReferenceFiles)Icon.icns" DestinationFiles="$(OutputResourcesPath)\$(IconFile)" Condition="!Exists('$(OutputResourcesPath)\$(IconFile)')" />

    <!-- Set executable bit on launcher if on *nix -->
    <Exec Command="chmod +x &quot;$(LauncherFileWithPath)&quot;" Condition="'$(OS)'=='Unix'" />
  </Target>
  
  <!-- Task to update the plist file with new values -->
  <UsingTask TaskName="UpdatePList" TaskFactory="$(MSBuildTaskFactoryType)"  AssemblyFile="$(MSBuildTasksAssemblyFile)">
    <ParameterGroup>
      <PListFile ParameterType="System.String" Required="true" />
      <TargetFileName ParameterType="System.String" Required="true" />
      <MacBundleName ParameterType="System.String" Required="true" />
      <LauncherFile ParameterType="System.String" Required="true" />
      <MonoMinimumVersion ParameterType="System.String" />
      <IconFile ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Code Type="Class" Language="cs"><![CDATA[
    using System;
    using System.IO;
    using System.Xml;
    using System.Text;
    using Microsoft.Build.Framework;
    using Microsoft.Build.Utilities;

    public class UpdatePList : Task
    {
      [Required]
      public string PListFile { get; set; }
      [Required]
      public string TargetFileName { get; set; }
      [Required]
      public string MacBundleName { get; set; }
      [Required]
      public string LauncherFile { get; set; }

      public string MonoMinimumVersion { get; set; }

      [Output]
      public string IconFile { get; set; }

      XmlDocument xml;
      XmlNode dict;

      class NullSubsetXmlTextWriter : XmlTextWriter
      {
        XmlWriterSettings _settings;
        public NullSubsetXmlTextWriter(string inputFileName, Encoding encoding)
          : base(inputFileName, encoding)
        {
          Formatting = Formatting.Indented;
          IndentChar = ' ';
          Indentation = 2;
          _settings = new XmlWriterSettings();
          _settings.Encoding = Encoding.UTF8;
          _settings.Indent = true;
          _settings.IndentChars = "  ";
          _settings.NewLineChars = "\n";
          _settings.NewLineHandling = NewLineHandling.Entitize;
        }

        public override XmlWriterSettings Settings { get { return _settings; } }

        public override void WriteDocType(string name, string pubid, string sysid, string subset)
        {
          // fix issue writing doctype
          if (subset == string.Empty)
            subset = null;
          base.WriteDocType(name, pubid, sysid, subset);
        }
      }

      string GetStringProperty(string name)
      {
        var location = dict.SelectSingleNode("key[.='" + name + "']/following-sibling::string[1]");
        return location.InnerText;
      }

      void AddStringProperty(string name, string value, bool force = false)
      {
        XmlNode node;
      
        var exists = dict.SelectSingleNode("key[text()='" + name + "']") != null;
        if (exists && !force)
          return;
      
        dict.AppendChild(node = xml.CreateNode(XmlNodeType.Element, "key", null));
        node.InnerText = name;
        dict.AppendChild(node = xml.CreateNode(XmlNodeType.Element, "string", null));
        node.InnerText = value;
      }
      
      public override bool Execute()
      {
        xml = new XmlDocument();
        xml.Load(PListFile);

        dict = xml.SelectSingleNode("plist/dict") as XmlElement;

        AddStringProperty("CFBundleIconFile", "Icon.icns");
        IconFile = GetStringProperty("CFBundleIconFile");

        AddStringProperty("CFBundleInfoDictionaryVersion", "6.0");
        AddStringProperty("CFBundlePackageType", "APPL");
        AddStringProperty("CFBundleSignature", "????");
        AddStringProperty("NSPrincipalClass", "NSApplication");
        AddStringProperty("CFBundleName", MacBundleName);
        AddStringProperty("CFBundleExecutable", LauncherFile, true);
        AddStringProperty("LSMinimumSystemVersion", "10.9");
        if (!string.IsNullOrEmpty(MonoMinimumVersion)) {
          AddStringProperty("MonoMinimumVersion", MonoMinimumVersion);
        }
        
        // support dark mode even when using mkbundle.
        // As of mono 5.18, it appears to be compiled with macOS 10.12 SDK
        // So dark mode would be disabled by default.
        AddStringProperty("NSRequiresAquaSystemAppearance", "False");

        using (var sw = new NullSubsetXmlTextWriter(PListFile, Encoding.UTF8))
          xml.Save(sw);
          return true;
      }
    }
]]></Code>
    </Task>
  </UsingTask>
</Project>