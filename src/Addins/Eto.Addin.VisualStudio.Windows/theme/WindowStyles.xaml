<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:eto="clr-namespace:Eto.Wpf.Forms;assembly=Eto.Wpf"
                    xmlns:etoc="clr-namespace:Eto.Wpf.Forms.Controls;assembly=Eto.Wpf"
                    xmlns:vsp="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0">

    <!-- Set all control styles to match VS theme (dark/light/blue/etc) -->

    <Style x:Key="etoTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.TextBoxBackgroundBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.TextBoxTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.TextBoxBorderBrushKey}}"/>
        <Style.Triggers>
            <Trigger Property="IsFocused"  Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.TextBoxBorderFocusedBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.TextBoxBackgroundFocusedBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.TextBoxTextFocusedBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled"  Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.TextBoxBorderDisabledBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.TextBoxBackgroundDisabledBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.TextBoxTextDisabledBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type etoc:EtoTextBox}" BasedOn="{StaticResource ResourceKey=etoTextBoxStyle}">
    </Style>

    <Style TargetType="{x:Type etoc:EtoWatermarkTextBox}" BasedOn="{StaticResource ResourceKey=etoTextBoxStyle}">
    </Style>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBackgroundBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBorderBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,1,2,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Fill="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphBrushKey}}" MinWidth="6" MinHeight="6" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBackgroundHoverBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBorderHoverBrushKey}}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphHoverBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBackgroundDisabledBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBorderDisabledBrushKey}}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphDisabledBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBackgroundPressedBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="radioButtonBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBorderPressedBrushKey}}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphPressedBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBackgroundBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBorderBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphBrushKey}}" Margin="1" Opacity="0" Stretch="None"/>
                                <Rectangle x:Name="indeterminateMark" Fill="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphBrushKey}}" Margin="2" Opacity="0"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBackgroundHoverBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBorderHoverBrushKey}}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphHoverBrushKey}}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphHoverBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBackgroundDisabledBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBorderDisabledBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxTextDisabledBrushKey}}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphDisabledBrushKey}}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphDisabledBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBackgroundPressedBrushKey}}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxBorderPressedBrushKey}}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphPressedBrushKey}}"/>
                            <Setter Property="Fill" TargetName="indeterminateMark" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.CheckBoxGlyphPressedBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type etoc:EtoGroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.TextBoxBorderBrushKey}}"/>
    </Style>

    <Style TargetType="{x:Type etoc:EtoButton}">
        <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonBorderBrushKey}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused"  Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonBorderFocusedBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonFocusedBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonFocusedTextBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled"  Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonBorderDisabledBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonDisabledBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonDisabledTextBrushKey}}" />
            </Trigger>
            <Trigger Property="IsDefault"  Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonBorderDefaultBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonDefaultBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonDefaultTextBrushKey}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonBorderHoverBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonHoverBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:CommonControlsColors.ButtonHoverTextBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:EnvironmentColors.PanelTextBrushKey}}"/>
    </Style>
    <Style TargetType="{x:Type etoc:EtoLabel}">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={x:Static vsp:EnvironmentColors.PanelTextBrushKey}}"/>
    </Style>

</ResourceDictionary>